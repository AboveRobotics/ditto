worker_processes 1;

events {worker_connections 1024;}

http {
  charset utf-8;
  default_type application/json;

  # timeouts are configured slightly higher than gateway read-timeout of 60 seconds
  proxy_connect_timeout 70; # seconds, default: 60
  proxy_send_timeout 70; # seconds, default: 60
  proxy_read_timeout 70; # seconds, default: 60
  send_timeout 70; # seconds, default: 60

  client_header_buffer_size 8k; # allow longer URIs + headers (default: 1k)
  large_client_header_buffers 4 16k;

  merge_slashes off; # allow multiple slashes

  # redirect to https
  server {
   listen 80;
   return 301 https://$host$request_uri;
  }

  # ssl protected
  server {
    listen 443 ssl;
    server_name zone0;

    ssl_certificate           /etc/nginx/cert.crt;
    ssl_certificate_key       /etc/nginx/cert.key;

    location / {
      index index.html;
    }

    # https://stackoverflow.com/questions/19366215/setting-headers-with-nginx-auth-request-and-oauth2-proxy
    # custom authentication server
    location /auth_x509 {
      internal;

      proxy_pass                    http://zone_auth:6567;
      proxy_pass_request_body       off;
      proxy_set_header              Content-Length            "";

      # proxy_set_header              X-Original-URI            $request_uri;
      # proxy_set_header              X-Forwarded-User          $remote_user;
      # proxy_set_header              x-ditto-pre-authenticated "nginx:${remote_user}";

      # auth_request_set              $auth_user $upstream_http_x_user;
    }

    location /zone_gateway {
      include nginx-cors.conf;

      proxy_pass                    http://zone_gateway:6566;
      proxy_http_version            1.1;
    }

    # location /tester {
    #   auth_request      /auth_x509;
    #   auth_request_set  $auth_user   $upstream_http_x_user;

    #   proxy_pass        http://zone_gateway:6566;
    #   proxy_set_header  x-ditto-pre-authenticated "nginx:${auth_user}";
    # }

    # api
    location /api {
      include nginx-cors.conf;

      auth_request                  /auth_x509;
      auth_request_set              $auth_user                $upstream_http_x_user;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                      $http_host;
      proxy_set_header              X-Real-IP                 $remote_addr;
      proxy_set_header              X-Forwarded-For           $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User          $auth_user;
      proxy_set_header              x-ditto-pre-authenticated "nginx:${auth_user}";

      proxy_set_header Connection  '';
      chunked_transfer_encoding    off;
      proxy_buffering              off;
      proxy_cache                  off;
    }

    # ws
    location /ws {
      auth_basic                    "Restricted";
      auth_basic_user_file          nginx.htpasswd;

      proxy_pass                    http://gateway:8080;
      proxy_http_version            1.1;
      proxy_set_header              Host                      $http_host;
      proxy_set_header              X-Real-IP                 $remote_addr;
      proxy_set_header              X-Forwarded-For           $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User          $remote_user;
      proxy_set_header              x-ditto-pre-authenticated "nginx:${remote_user}";

      proxy_set_header              Upgrade             $http_upgrade;
      proxy_set_header              Connection          "upgrade";
      proxy_read_timeout            1d;
      proxy_send_timeout            1d;
    }

    # health
    location /health {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080/health;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;
    }

    # status
    location /status {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080/overall/status;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;
    }

    # stats
    location /stats {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080/stats;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;
    }

    # devops
    location /devops {
      include nginx-cors.conf;

      proxy_pass                    http://gateway:8080/devops;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
      proxy_set_header              X-Real-IP           $remote_addr;
      proxy_set_header              X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header              X-Forwarded-User    $remote_user;
    }

    # swagger
    # access API doc on: /apidoc/2
    location /apidoc/ {
      rewrite ^/apidoc/([0-9])$ $scheme://$http_host/apidoc/?url=/apidoc/openapi/ditto-api-$1.yml  redirect;
      proxy_pass                    http://swagger-ui:8080/;
      proxy_http_version            1.1;
      proxy_set_header              Host                $http_host;
    }
  }
}
